<template>
  <div class="app-container-padding" :class="{hiddenForm:formFlag}">
    <div class="containerTop">
      <p class="title" style="margin-top: 0;">发货信息</p>
      <el-button
        type="primary"
        :icon="formSizeIcon"
        size="mini"
        class="changeBtn"
        @click="changeTableSize">{{ formSize }}
      </el-button>
      <div class="deliverDiv">
        <div class="deliverInfo">
          <el-form :model="deliverInfo" size="mini" :inline="true" ref="ruleForm" class="ipt2">
            <el-form-item label="发货编号">
              <el-input v-model="deliverInfo.deliverNo" clearable disabled/>
            </el-form-item>
            <el-form-item label="发货客户" prop="customerName" class="customerName">
              <el-input v-model="deliverInfo.customerName" placeholder="请输入发货客户"
                        ref="customerNameInput" clearable>
                <el-button slot="append" icon="el-icon-search" @click="handleBlur"></el-button>
              </el-input>
            </el-form-item>
            <el-form-item label="发货日期">
              <el-date-picker
                v-model="deliverInfo.deliverDate"
                type="date"
                placeholder="选择日期时间"
                value-format="yyyy-MM-dd">
              </el-date-picker>
            </el-form-item>
            <el-form-item label="发货方式">
              <el-select v-model="deliverInfo.deliverMode" placeholder='请选择发货方式' prop="deliverMode">
                <el-option
                  v-for="item in dict.type.deliver_mode"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="发货负责人" prop="deliverPerson">
              <el-input v-model="deliverInfo.deliverPerson" placeholder="请输入发货负责人" clearable/>
            </el-form-item>
            <el-form-item label="联系人电话" class="deliverPhone" prop="deliverPhone">
              <el-input v-model="deliverInfo.deliverPhone" placeholder="请输入发货联系方式" clearable/>
            </el-form-item>
            <el-form-item label="收货地址" class="address" prop="deliverAddress">
              <el-input v-model="deliverInfo.deliverAddress" placeholder="请输入收货地址" clearable/>
            </el-form-item>
            <el-form-item label="运输方式" prop="shippingType">
              <el-select v-model="deliverInfo.shippingType" placeholder='请选择运输方式' prop="deliverMode">
                <el-option
                  v-for="item in dict.type.shipping_type"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="运输司机" prop="driver">
              <el-input v-model="deliverInfo.driver" placeholder="请输入运输司机" clearable/>
            </el-form-item>
            <el-form-item label="运输车号" prop="carCode">
              <el-input v-model="deliverInfo.carCode" placeholder="请输入运输车号" clearable/>
            </el-form-item>
            <el-form-item label="安装员" prop="installer">
              <el-input v-model="deliverInfo.installer" placeholder="请输入安装员" clearable/>
            </el-form-item>
            <el-form-item label="备注" class="remarks">
              <el-input v-model="deliverInfo.deliverRemarks" type="textarea" clearable size="mini" placeholder="请输入内容"/>
            </el-form-item>
            <el-form-item label="运输费" class="money">
              <el-input-number v-model="deliverInfo.freight" :min="0" clearable/>
            </el-form-item>
            <el-form-item label="装卸费" class="money">
              <el-input-number v-model="deliverInfo.handlingCharges" :min="0" clearable/>
            </el-form-item>
            <el-form-item label="包装费" class="money">
              <el-input-number v-model="deliverInfo.packingFee" :min="0" clearable/>
            </el-form-item>
            <el-form-item label="安装费" class="money">
              <el-input-number v-model="deliverInfo.installationFee" :min="0" clearable/>
            </el-form-item>
            <el-form-item label="其他费用（除铁架）" class="money">
              <el-input-number v-model="deliverInfo.otherExpenses" :min="0" clearable/>
            </el-form-item>
          </el-form>
        </div>
        <div class="deliverPerson">
          <el-button
            type="primary"
            icon="el-icon-files"
            size="mini"
            style="margin-bottom: 10px;"
            @click="handleSelectShelf">选择货架
          </el-button>
          <slot-table class="shelfList">
            <el-table highlight-current-row
                      :data="shelfList"
                      stripe
                      border
                      style="width: 100%"
                      height="100%"
                      slot="table">
              <el-table-column
                type="index"
                label="序号"
                width="50">
              </el-table-column>
              <el-table-column
                v-for="(item,index) in shelfListColumns"
                :key="index"
                :label="item.label"
                :prop="item.prop"
                show-overflow-tooltip>
              </el-table-column>
              <el-table-column label="货架数量" prop="frameNum" width="160">
                <template slot-scope="scope">
                  <!--可根据类型来显示为搜索框、下拉框等-->
                  <el-input-number
                    :min="0"
                    v-model="scope.row.frameNum"
                    size="mini"
                    clearable style="width: 120px"/>
                </template>
              </el-table-column>
              <el-table-column label="单价" prop="shelfMoney" width="160">
                <template slot-scope="scope">
                  <!--可根据类型来显示为搜索框、下拉框等-->
                  <el-input-number
                    v-model="scope.row.framePrice"
                    size="mini"
                    :min="0"
                    clearable style="width: 120px"/>
                </template>
              </el-table-column>
              <el-table-column label="是否带回" prop="isReturn" width="120">
                <template slot-scope="scope">
                  <!--可根据类型来显示为搜索框、下拉框等-->
                  <el-radio v-model="scope.row.isBring" label='0'>是</el-radio>
                  <el-radio v-model="scope.row.isBring" label='1'>否</el-radio>
                </template>
              </el-table-column>
              <el-table-column label="操作">
                <template slot-scope="scope">
                  <el-button
                    type="text"
                    @click="removeShelf(scope.$index, shelfList)"
                    size="mini">移除
                  </el-button>
                </template>
              </el-table-column>
            </el-table>
          </slot-table>
        </div>
      </div>
    </div>
    <p class="title">发货产品信息</p>
    <div class="containerCenter">
      <div class="btn">
        <el-button
          type="primary"
          icon="el-icon-folder-add"
          v-if="deliverInfo.deliverType == 0"
          size="mini"
          @click="handleOrder">订单获取
        </el-button>
        <el-button
          type="primary"
          icon="el-icon-folder-add"
          v-if="deliverInfo.deliverType == 1"
          size="mini"
          @click="handlePacking">打包获取
        </el-button>
        <el-button
          type="primary"
          icon="el-icon-folder-add"
          v-if="deliverInfo.deliverType == 2"
          size="mini"
          @click="handleFlowCard">流程卡获取
        </el-button>
        <el-button
          type="primary"
          icon="el-icon-edit"
          size="mini"
          @click="editPrintMoney"
        >编辑打印单价
        </el-button>
        <el-button
          type="primary"
          icon="el-icon-folder-remove"
          @click="removeGetType"
          size="mini">移除
        </el-button>
      </div>
      <div class="btn">
        <el-button
          type="primary"
          icon="el-icon-check"
          size="mini"
          @click="saveDeliverList('ruleForm')">保存
        </el-button>
        <el-button
          icon="el-icon-refresh-left"
          size="mini"
          @click="addBack">返回
        </el-button>
      </div>
    </div>
    <slot-table class="deliverList">
      <el-table highlight-current-row
                :data="deliverList"
                stripe
                border
                style="width: 100%"
                height="100%"
                slot="table"
                ref="deliverListRef"
                @selection-change="handleDeliverChange"
                @row-click="handleDeliverRowClick">
        <el-table-column
          type="selection"
          width="55">
        </el-table-column>
        <el-table-column
          type="index"
          label="序号"
          width="55" show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          v-for="(item,index) in deliverListColumns"
          :key="index"
          :label="item.label"
          :prop="item.prop"
          :min-width="item.width"
          v-if="item.deliverType.includes(deliverInfo.deliverType)"
          show-overflow-tooltip>
        </el-table-column>
        <el-table-column width="180" label="发货单价">
          <template slot-scope="scope">
            <el-input-number size="mini" v-model="scope.row.deliverPrice" :min="0"></el-input-number>
          </template>
        </el-table-column>
        <el-table-column width="180" label="发货数量" v-if="deliverInfo.deliverType == 0">
          <template slot-scope="scope">
            <el-input-number size="mini" v-model="scope.row.noShelfNum" :min="0"
                             :max="Number(scope.row.completionNum) - Number(scope.row.orderDeliverNum) + Number(scope.row.deliverNum)"></el-input-number>
          </template>
        </el-table-column>
        <el-table-column width="180" label="发货数量" v-if="deliverInfo.deliverType == 1">
          <template slot-scope="scope">
            <el-input-number size="mini" v-model="scope.row.noShelfNum" :min="0" :max="Number(scope.row.packNum)"></el-input-number>
          </template>
        </el-table-column>
      </el-table>
    </slot-table>
    <!--  选择客户  -->
    <customer-dialog :selectCustomerDialog="selectCustomerDialog"
                     @saveSelectCustomer="saveSelectCustomer"
                     @cancelSelectCustomer="cancelSelectCustomer"
                     ref="customerDialog">
    </customer-dialog>
    <!--  选择铁架  -->
    <el-dialog
      title="选择铁架"
      :visible.sync="selectShelfDialog"
      width="70%"
      class="dialog-style selectShelfDialog"
      :close-on-click-modal="false" :close-on-press-escape="false" :destroy-on-close="true">
      <el-form :model="shelfParams" ref="queryForm" size="mini" :inline="true" class="iptAndBtn">
        <el-form-item label="铁架编号">
          <el-input v-model="shelfParams.frameNo" @keyup.enter.native="getShelfList" placeholder="请输入铁架编号" clearable/>
        </el-form-item>
        <el-form-item label="铁架名称">
          <el-input v-model="shelfParams.frameName" @keyup.enter.native="getShelfList" placeholder="请输入铁架名称" clearable/>
        </el-form-item>
        <!--          <el-form-item>-->
        <el-button type="primary" icon="el-icon-search" size="mini" @click="getShelfList">搜索</el-button>
        <!--          </el-form-item>-->
      </el-form>
      <slot-table class="rightTable"
                  @handleChange="handleShelfChange"
                  :pageSize="shelfParams.pageSize"
                  :pageNum="shelfParams.pageNum"
                  :total="shelfTotal">
        <el-table highlight-current-row
                  :data="frameList"
                  stripe
                  border
                  height="100%"
                  style="width: 100%"
                  ref="multipleShelfTable"
                  @row-click="handleRowClickShelf"
                  @selection-change="handleSelectionShelf"
                  :index="getShelfIndex"
                  slot="table">
          <el-table-column
            type="selection"
            width="55">
          </el-table-column>
          <el-table-column
            type="index"
            label="序号"
            width="50">
          </el-table-column>
          <el-table-column
            v-for="item in shelfListColumn"
            :key="item.prop"
            :prop="item.prop"
            :label="item.label"
            :min-width="item.width" show-overflow-tooltip>
          </el-table-column>
        </el-table>
      </slot-table>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" size="mini" @click="saveSelectShelf">添加</el-button>
        <el-button size="mini" @click="selectShelfDialog=false">取消</el-button>
    </span>
    </el-dialog>
    <!--  选择发货产品  -->
    <el-dialog
      :title="getType"
      :visible.sync="getTypeDialog"
      width="90%"
      class="dialog-style exportProductList"
      :close-on-click-modal="false" :close-on-press-escape="false" :destroy-on-close="true"
      :before-close="cancelGetType">
      <el-form :model="getTypeParams" size="mini" :inline="true" class="iptAndBtn">
        <el-form-item label="订单编号" v-if="getType==='订单获取'">
          <el-input @keyup.enter.native="handleGetType" v-model="getTypeParams.orderNo" placeholder="请输入订单编号" clearable/>
        </el-form-item>
        <el-form-item label="自定义编号" v-if="getType==='订单获取'">
          <el-input @keyup.enter.native="handleGetType" v-model="getTypeParams.customNo" placeholder="请输入自定义编号" clearable/>
        </el-form-item>
        <el-form-item label="打包编号" v-if="getType==='打包获取'">
          <el-input @keyup.enter.native="handleGetType" v-model="getTypeParams.packagingNo" placeholder="请输入打包编号" clearable/>
        </el-form-item>
        <el-form-item label="流程卡号" v-if="getType==='流程卡获取'">
          <el-input @keyup.enter.native="handleGetType" v-model="getTypeParams.packagingNo" placeholder="请输入流程卡号" clearable/>
        </el-form-item>
        <el-form-item label="客户名称">
          <el-select ref="customerName" @keyup.enter.native="handleGetType"
                     v-model="getTypeParams.customerName" filterable placeholder="请选择客户" clearable>
            <el-option
              v-for="(item,index) in customerNameList"
              :key="index"
              :label="item.customerName"
              :value="item.customerName">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="产品名称" v-if="getType==='打包获取'">
          <el-input @keyup.enter.native="handleGetType" v-model="getTypeParams.productName" placeholder="请输入产品名称" clearable/>
        </el-form-item>
        <el-form-item label="项目名称">
          <el-input @keyup.enter.native="handleGetType" v-model="getTypeParams.entryName" placeholder="请输入项目名称" clearable/>
        </el-form-item>
        <el-form-item :label="getTypeDate" class="daterange">
          <el-date-picker
            v-model="getTypeDateRange"
            type="daterange"
            range-separator="至"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            @change="handleGetType"
            value-format="yyyy-MM-dd">
          </el-date-picker>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" icon="el-icon-search" size="mini" @click="handleGetType">搜索</el-button>
        </el-form-item>
      </el-form>
      <slot-table @handleChange="handleChange" :pageSize="pageSize" :pageNum="pageNum"
                  :total="total" class="productList">
        <el-table highlight-current-row
                  :data="getTypeList"
                  stripe
                  border
                  style="width: 100%"
                  height="100%"
                  ref="multipleTable"
                  @selection-change="handleSelectionChange"
                  @row-click="handleRowClick"
                  slot="table">
          <el-table-column
            type="selection"
            width="55">
          </el-table-column>
          <el-table-column
            :index="getIndex"
            type="index"
            label="序号"
            width="50">
          </el-table-column>
          <el-table-column
            v-for="(item,index) in getTypeColumns"
            :key="index"
            :label="item.label"
            :prop="item.prop"
            :type="item.type"
            :min-width="item.width"
            show-overflow-tooltip>
          </el-table-column>
        </el-table>
      </slot-table>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" size="mini" @click="saveGetType">添加</el-button>
        <el-button size="mini" @click="cancelGetType">取消</el-button>
    </span>
    </el-dialog>
    <!--  批量修改单价  -->
    <el-dialog title="修改单价" :visible.sync="changePriceDialog" width="500px" class="dialog-style">
      <el-form size="mini" ref="form" :model="priceForm" :rules="priceRules" class="ipt onlyOneChild" :inline="true">
        <el-form-item label="修改打印单价为" prop="price">
          <el-input v-model="priceForm.price" clearable/>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitPriceForm('form')" size="mini">保存</el-button>
        <el-button @click="changePriceDialog = false" size="mini">取 消</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>

import SlotTable from "@/components/public/table/SlotTable";
import CustomerDialog from "@/views/sales/components/customerDialog";
import {Message} from "element-ui";
import ShelfDialog from "@/views/sales/components/shelfDialog";
import {
  productionNumber,
  obtainOrderProduct,
  obtainPackProduct,
  saveDeliver,
  detailsView,
  updateDeliver
} from "@/api/salse/deliver";
import {getCurrentDay} from "@/utils/order/order";
import {customerList} from "@/api/system/customer";
import {queryShelfData} from "@/api/salse/order/shelfManage";

export default {
  dicts: ['deliver_mode', 'shipping_type'],
  name: "index",
  components: {ShelfDialog, CustomerDialog, SlotTable},
  created() {
    // this.productionNumber();
    this.detailsView();
  },
  mounted() {
    var deliverListRef = this.$refs.deliverListRef.$refs.bodyWrapper
    deliverListRef.addEventListener('scroll', () => {
      // 滚动距离
      const scrollLeft = deliverListRef.scrollLeft;
      this.$refs.deliverListRef.$refs.headerWrapper.scrollLeft = scrollLeft
    })
  },
  //设置表格表体高度自适应
  updated() {
    this.$nextTick(() => {
      // this.$refs.checkDetailsTable.$refs.footerWrapper.style.display = 'block';
      this.$refs.deliverListRef.doLayout();
    })
  },
  data() {
    return {
      deliverInfo: {
        deliverNo: '',
        customerName: '',
        deliverDate: '',
        deliverMode: '',
        deliverPerson: '',
        deliverPhone: '',
        deliverAddress: '',
        shippingType: '',
        driver: '',
        carCode: '',
        installer: '',
        freight: 0,
        handlingCharges: 0,
        packingFee: 0,
        installationFee: 0,
        otherExpenses: 0,
        deliverRemarks: '',
        deliveryShelfList: [],
        deliverBusiness: [],
      },
      selectCustomerDialog: false,  //选择客户弹窗
      // selectedCustomer:[], //选择客户复选框
      formSizeIcon: 'el-icon-arrow-up',   // 表单最大化图标
      formSize: '收起',   //表单最大化
      formFlag: false,
      selectShelfDialog: false,  //选择货架弹窗
      shelfList: [],
      shelfListColumns: [
        {label: '货架编号', prop: 'frameNo'},
        {label: '货架名称', prop: 'frameName'},
        {label: '货架规格', prop: 'frameSpecs'},
      ],
      shelfCheckList: [],
      deliverList: [],  //发货列表
      selected: [], //发货选择框
      deliverListColumns: [
        {label: '打包编号', prop: 'packNo', width: '150', deliverType: [1]},
        {label: '订单编号', prop: 'orderNo', width: '120', deliverType: [0, 1, 2]},
        {label: '自定义编号', prop: 'customNo', width: '120', deliverType: [0, 1, 2]},
        {label: '客户名称', prop: 'customerName', width: '120', deliverType: [0, 1, 2]},
        {label: '项目名称', prop: 'entryName', width: '200', deliverType: [0, 1, 2]},
        {label: '产品名称', prop: 'productName', width: '200', deliverType: [0, 1, 2]},
        {label: '宽（mm）', prop: 'wideHead', width: '110', deliverType: [0, 1, 2]},
        {label: '高（mm）', prop: 'highHead', width: '110', deliverType: [0, 1, 2]},
        {label: '产品数量（片）', prop: 'num', width: '120', deliverType: [0, 1, 2]},
        {label: '产品已发货数量（片）', prop: 'orderDeliverNum', width: '150', deliverType: [0, 1, 2]},
        {label: '完工数量（片）', prop: 'completionNum', width: '120', deliverType: [0]},
        {label: '打包总数（片）', prop: 'packNum', width: '120', deliverType: [1]},
        {label: '打包已发货数（片）', prop: 'noShelfNum', width: '150', deliverType: [1]},
      ],
      getType: '订单获取',
      getTypeDialog: false,
      customerNameList: [],
      getTypeParams: {
        pageNum : 1,
        pageSize : 20,
      },
      getTypeDate: '下单时间',
      getTypeDateRange: [],
      getTypeList: [], //获取类型表
      getTypeColumns: [],
      pageSize: 20,
      pageNum: 1,
      total: 0,
      getTypeSelected: [],  //获取方式选择复选框
      shelfParams: {
        frameNo: '',
        frameName: '',
        pageNum: 1,
        pageSize: 20,
      },
      shelfTotal: 0,
      frameList: [],         // 表格数据
      selectedShelf: [],
      shelfListColumn: [
        {label: '铁架名称', prop: 'frameName', width: '150'},
        {label: '铁架编号', prop: 'frameNo', width: '150'},
        {label: '铁架规格', prop: 'frameSpecs', width: '150'},
        {label: '铁架数量（个）', prop: 'frameNum', width: '150'},
        {label: '创建时间', prop: 'createdAt', width: '180'},
        {label: '创建人', prop: 'createdPerson', width: '150'},
        {label: '备注', prop: 'remark'},
      ],  //表头
      changePriceDialog: false,  //修改单价
      priceForm: {
        price: '',
      },
      priceRules: {
        price: [
          {required: true, message: "修改打印单价不能为空", change: "blur"},
          {pattern: /^[+]?(0|([1-9]\d*))(\.\d+)?$/g, message: '请输入整数或小数'}
        ],
      },
      rules: {
        customerName: [
          {required: true, message: "客户名称不能为空", change: ["blur", 'change']},
          {max: 40, message: '字符长度最大不得超过40', trigger: 'blur'}
        ],
        deliverPerson: [
          {max: 10, message: '字符长度最大不得超过10', trigger: 'blur'}
        ],
        deliverMode: [
          {max: 10, message: '字符长度最大不得超过10', trigger: 'blur'}
        ],
        deliverAddress: [
          {required: true, message: '请填写收货地址', trigger: 'blur'},
          {max: 125, message: '字符长度最大不得超过125', trigger: 'blur'}
        ],
        shippingType: [
          {max: 20, message: '字符长度最大不得超过20', trigger: 'blur'}
        ],
        driver: [
          {max: 10, message: '字符长度最大不得超过10', trigger: 'blur'}
        ],
        carCode: [
          {max: 20, message: '字符长度最大不得超过20', trigger: 'blur'}
        ],
        installer: [
          {max: 10, message: '字符长度最大不得超过10', trigger: 'blur'}
        ],
        deliverDate: [
          {required: true, message: '发货日期不能为空', trigger: 'blur'}
        ],
        deliverPhone: [
          {required: true, message: '请输入联系人电话', trigger: 'blur'},
          {pattern: /^(1[345789]\d{9})$/, message: '请输入正确的手机号'}
        ],
        deliverRemarks: [
          {max: 125, message: '字符长度最大不得超过125', trigger: 'blur'}
        ]
      }
    }
  },
  // watch: {
  //   getType(newVal, oldVal) {
  //     // 第一个参数 : 新值
  //     // 第二个参数 : 旧值,之前的值
  //     // console.log('oldVal:', oldVal)
  //     // console.log('newVal:', newVal)
  //     if (newVal !== oldVal) {
  //       this.deliverList = [];
  //     }
  //   }
  // },
  methods: {

    /*查询编辑信息*/
    detailsView() {
      detailsView({deliverId: this.$route.params.id}).then(res => {
        // console.log('res',res)
        this.deliverInfo = res.data;
        this.shelfList = res.data.deliveryShelfList;
        this.deliverList = res.data.deliverBusinessList;
        this.shelfList.forEach(item => {
          item.isBring = String(item.isBring)
        })
      })
    },
    /* 选择客户 */
    handleBlur() {
      this.selectCustomerDialog = true;
    },
    /* 保存选择客户弹窗 */
    saveSelectCustomer(val) {
      if (!val || val.length <= 0) {
        Message.warning("请选择一条数据进行添加");
        return false
      }
      if (val.length === 1) {
        this.selectCustomerDialog = false;
        this.deliverInfo.customerName = val[0].customerName;
        this.deliverInfo.deliverAddress = val[0].address;
        this.deliverInfo.customerPhone = val[0].phone;
        this.$refs.customerDialog.$refs.multipleCustomerTable.clearSelection();
        this.$refs.customerNameInput.blur();
      }
    },
    /* 取消选择客户弹窗 */
    cancelSelectCustomer() {
      this.selectCustomerDialog = false;
      this.$refs.customerDialog.$refs.multipleCustomerTable.clearSelection();
    },
    /* 选择铁架 */
    handleSelectShelf() {
      this.shelfParams = {
        frameNo: '',
        frameName: '',
        pageNum: 1,
        pageSize: 20,
      };
      this.selectShelfDialog = true;
      this.getShelfList();
    },
    removeShelf(index, rows) {
      rows.splice(index, 1);
    },
    /* 铁架查询 */
    getShelfList() {
      queryShelfData(this.shelfParams).then(res => {
        if (res.code === 200) {
          this.frameList = res.data;
          this.shelfTotal = res.count;
        }
      })
    },
    /* 翻页后，序号连贯 */
    getShelfIndex($index) {
      //  表格序号
      return (this.shelfParams.pageNum - 1) * this.shelfParams.pageSize + $index + 1;
    },
    handleSelectionShelf(val) {
      this.selectedShelf = val;
    },
    /* 铁架列表点击行 */
    handleRowClickShelf(row, column, event) {
      this.$refs.multipleShelfTable.toggleRowSelection(row, column)
    },
    /* 铁架分页器 */
    handleShelfChange(size, num) {
      this.shelfParams.pageSize = size;
      this.shelfParams.pageNum = num;
      this.getShelfList();
    },
    /* 保存铁架 */
    saveSelectShelf() {
      // console.log(val)
      if (!this.selectedShelf || this.selectedShelf.length <= 0) {
        Message.warning("请选择一条数据进行添加");
        return false
      }
      for (let i = 0; i < this.selectedShelf.length; i++) {
        var index = this.frameList.indexOf(this.selectedShelf[i])
        this.selectedShelf[i].isBring = '0';
        for (let j = 0; j < this.shelfList.length; j++) {
          if (this.selectedShelf[i].id == this.shelfList[j].id) {
            Message.warning("序号为" + (index + 1) + "的数据已经添加,不可重复添加！");
            return;
          }
        }
      }
      this.shelfList.push(...this.selectedShelf);
      Message.success("添加成功");
      this.selectShelfDialog=false;
    },
    /* 移除铁架 */
    deleteRow(index, rows) {
      rows.splice(index, 1);
    },
    /* 改变表格大小 */
    changeTableSize() {
      if (!this.formFlag) {
        this.formSizeIcon = 'el-icon-arrow-down';
        this.formSize = '展开';
      }
      if (this.formFlag) {
        this.formSizeIcon = 'el-icon-arrow-up';
        this.formSize = '收起';
      }
      this.formFlag = !this.formFlag;
    },
    /* 订单获取 */
    handleOrder() {
      this.getType = '订单获取';
      this.getTypeDialog = true;
      this.getTypeParams = {
        orderNo: '',
        customNo: '',
        customerName: '',
        entryName: '',
        productName: '',
        packagingNo: '',
        preparationDateStart: '',
        preparationDateEnd: '',
        packNo: '',
        packName: '',
      };
      this.getTypeDate = '下单时间';
      // this.getTypeDateRange = [];

      this.getTypeColumns = [
        {label: '订单编号', prop: 'orderNo', type: 'ipt', width: '120'},
        {label: '自定义编号', prop: 'customNo', type: 'ipt', width: '120'},
        {label: '客户名称', prop: 'customerName', type: 'ipt', width: '120'},
        {label: '项目名称', prop: 'entryName', type: 'ipt', width: '200'},
        {label: '产品名称', prop: 'productName', type: 'ipt', width: '200'},
        {label: '宽（mm）', prop: 'wideHead', width: '110'},
        {label: '高（mm）', prop: 'highHead', width: '110'},
        {label: '产品数量（片）', prop: 'num', width: '150'},
        {label: '单价（元/m²）', prop: 'unitPrice', width: '120'},
        {label: '总金额（元）', prop: 'productAmount', width: '150'},
        {label: '产品面积（m²）', prop: 'productArea', width: '150'},
        {label: '产品重量（t）', prop: 'productWeight', width: '150'},
        {label: '完工数量（片）', prop: 'completionNum', width: '150'},
        // {label: '入库数量（片）', prop: 'warehousingQuantity', width: '150'},
        // {label: '仓库位置', prop: 'warehouseLocation', width: '150'},
        // {label: '货架位置', prop: 'shelfLocation', width: '150'},
        // {label: '打包数量（片）', prop: 'orderPackNum', width: '150'},
        {label: '已发货数量（片）', prop: 'orderDeliverNum', width: '150'},
        // {label: '可发货数量（片）', prop: 'noShelfNum', width: '100'},
      ];
      this.getTypeList = [];
      customerList({
        pagenum: 1,
        pageSize: 10000
      }).then(res => {
        this.customerNameList = res.data;
      })
      this.handleGetType();
    },
    /* 打包获取 */
    handlePacking() {
      this.getType = '打包获取';
      this.getTypeDialog = true;
      this.getTypeParams = {
        customNo: '',
        customerName: '',
        entryName: '',
        orderNo: '',
        productName: '',
        packagingNo: '',
        packagingDateStart: '',
        packagingDateEnd: '',
        packagingMode: '',
        // packagingNo:'',
        responsiblePerson: '',
      };
      this.getTypeDate = '打包时间';
      this.getTypeDateRange = [];
      this.getTypeColumns = [
        {label: '打包编号', prop: 'packNo', width: '150', type: 'ipt'},
        {label: '打包名称', prop: 'packName', width: '150', type: 'ipt'},
        {label: '打包方式', prop: 'packagingMode', width: '100', type: 'ipt'},
        {label: '订单编号', prop: 'orderNo', width: '120', type: 'ipt'},
        {label: '自定义编号', prop: 'customNo', width: '120', type: 'ipt'},
        {label: '客户名称', prop: 'customerName', width: '120', type: 'ipt'},
        {label: '项目名称', prop: 'entryName', width: '200', type: 'ipt'},
        {label: '产品名称', prop: 'productName', width: '200', type: 'ipt'},
        {label: '宽（mm）', prop: 'wideHead', width: '110'},
        {label: '高（mm）', prop: 'highHead', width: '110'},
        {label: '产品数量（片）', prop: 'num', width: '150'},
        {label: '产品面积（m²）', prop: 'productArea', width: '150'},
        {label: '产品重量（t）', prop: 'productWeight', width: '150'},
        {label: '完工数量（片）', prop: 'completionNum', width: '150'},
        {label: '已发货数量（片）', prop: 'orderDeliverNum', width: '150'},
        {label: '可发货数量（片）', prop: 'noShelfNum', width: '150'},
      ];
      // this.deliverList = [];
      console.log('deliverList', this.deliverList)
      this.getTypeList = [];
      customerList({
        pagenum: 1,
        pageSize: 10000
      }).then(res => {
        this.customerNameList = res.data;
      })
      this.handleGetType();
    },
    /* 流程卡获取 */
    handleFlowCard() {
      this.getType = '流程卡获取';
      this.getTypeDialog = true;
      this.getTypeParams = {
        pageNum: 1,
        pageSize: 20,
        collectionStatus: '',
        contactNumber: '',
        contacts: '',
        customNo: '',
        customerName: '',
        entryName: '',
        id: '',
        isCache: 0,
        orderNo: '',
        orderType: '',
        packagingStatus: '',
        preparationDateEnd: '',
        preparationDateStart: '',
        preparer: '',
        productionStatus: '',
        rackSplittingStatus: '',
        shipmentStatus: '',       // createTime: undefined,
        isDel: 0,
      };
      this.getTypeDate = '分架时间';
      this.getTypeDateRange = [];
      this.getTypeColumns = [
        {label: '流程卡号', prop: 'orderNo', type: 'ipt', width: '150'},
        {label: '订单编号', prop: 'orderNo', type: 'ipt', width: '120'},
        {label: '客户名称', prop: 'customerName', type: 'ipt', width: '200'},
        {label: '项目名称', prop: 'entryName', type: 'ipt', width: '200'},
        {label: '产品名称', prop: 'preparationDate', type: 'date', width: '200'},
        {label: '数量（片）', prop: 'preparer', type: 'ipt'},
        {label: '面积（m²）', prop: 'orderReview.reviewedBy'},
        {label: '分架日期', prop: 'orderReview.auditTime', width: '200'},
      ];
      this.getTypeList = [];
      customerList({
        pagenum: 1,
        pageSize: 10000
      }).then(res => {
        this.customerNameList = res.data;
      })
      this.handleGetType();
    },
    /* 获取发货产品数据 */
    handleDeliverChange(val) {
      this.selected = val;
    },
    /* 行点击事件 */
    handleDeliverRowClick(row, column, event) {
      this.$refs.deliverListRef.toggleRowSelection(row, column)
    },
    /* 移除获取后数据 */
    removeGetType() {
      if (this.deliverList.length <= 0) {
        Message.warning("请先导入需要发货的信息");
      } else {
        if (this.selected.length <= 0) {
          Message.warning("请选择需要移除的数据");
        } else {
          this.selected.forEach(item => {
            for (let i = this.deliverList.length - 1; i >= 0; i--) {
              if (item.id === this.deliverList[i].id) {
                this.deliverList.splice(i, 1)
              }
            }
          })
        }
      }
    },
    /* 修改打印单价 */
    editPrintMoney() {
      console.log(this.selected)
      if (this.selected.length <= 0) {
        Message.warning("请先选择需要修改的数据");
      } else {
        this.changePriceDialog = true;
      }
    },
    /* 查询获取类型信息 */
    handleGetType() {
      this.getTypeParams.customerName = this.deliverInfo.customerName
      this.getTypeParams.pageNum = this.pageNum;
      this.getTypeParams.pageSize = this.pageSize;
      if (this.getType === '订单获取') {
        console.log(this.getTypeParams)
        if (this.getTypeDateRange) {
          this.getTypeParams.preparationDateStart = this.getTypeDateRange[0];
          this.getTypeParams.preparationDateEnd = this.getTypeDateRange[1];
        } else {
          this.getTypeParams.preparationDateStart = '';
          this.getTypeParams.preparationDateEnd = '';
        }
        obtainOrderProduct(this.getTypeParams).then(res => {
          this.getTypeList = res.data;
          this.total = res.count;
        })
      }
      if (this.getType === '打包获取') {
        if (this.getTypeDateRange) {
          this.getTypeParams.packagingDateStart = this.getTypeDateRange[0];
          this.getTypeParams.packagingDateEnd = this.getTypeDateRange[1];
        } else {
          this.getTypeParams.packagingDateStart = '';
          this.getTypeParams.packagingDateEnd = '';
        }
        obtainPackProduct(this.getTypeParams).then(res => {
          this.getTypeList = res.data;
          this.total = res.count;
        })
      }
      if (this.getType === '流程卡获取') {

      }
    },
    /* 获取类型翻页后序号连贯 */
    getIndex($index) {
      //  表格序号
      return (this.pageNum - 1) * this.pageSize + $index + 1;
    },
    /* 发货复选框 */
    handleSelectionChange(val) {
      this.getTypeSelected = val;
    },
    /* 行点击事件 */
    handleRowClick(row, column, event) {
      this.$refs.multipleTable.toggleRowSelection(row, column)
    },
    /* 添加获取类型 */
    saveGetType() {
      if (!this.getTypeSelected || this.getTypeSelected.length <= 0) {
        Message.warning("请选择一条数据进行添加");
        return false
      }
      if (this.getTypeSelected.length > 0) {
        let obj = {};
        this.getTypeSelected.forEach(item => {
          item.newUnitPrice = item.unitPrice;
          item.completionNum = item.noShelfNum
          let key = item.customerName;
          obj[key] = 1;
        })
        let keys = Object.keys(obj)
        if (keys.length !== 1) {
          Message.warning("请选择相同客户的订单");
        } else {
          if (keys[0] !== this.deliverInfo.customerName) {
            this.deliverInfo.customerName = keys[0];
          }
          this.deliverInfo.customerName = keys[0]
          for (let i = 0; i < this.getTypeSelected.length; i++) {
            this.getTypeSelected[i].deliverPrice = this.getTypeSelected[i].unitPrice;
            if (this.getType == "订单获取") {
              this.getTypeSelected[i].productId = this.getTypeSelected[i].id
            }
            var index = this.getTypeList.indexOf(this.getTypeSelected[i]);
            for (let j = 0; j < this.deliverList.length; j++) {
              if (this.getTypeSelected[i].productId == this.deliverList[j].productId) {
                Message.warning("序号为" + (index + 1) + "的数据已经添加,不可重复添加！");
                return;
              }
              if (this.getTypeSelected[i].customerName != this.deliverList[j].customerName) {
                Message.warning("请选择相同客户的产品！");
                return;
              }
            }
          }
          this.deliverList.push(...this.getTypeSelected);
          Message.success("添加成功！");
          this.getTypeDialog = false;
          this.$refs.multipleTable.clearSelection();
        }
      }
    },
    /* 取消获取类型*/
    cancelGetType() {
      this.getTypeDialog = false;
      this.$refs.multipleTable.clearSelection();
    },
    /* 获取类型分页器 */
    handleChange(size, num) {
      this.pageSize = size;
      this.pageNum = num;
      this.getTypeParams.pageNum = this.pageNum;
      this.getTypeParams.pageSize = this.pageSize;
      this.handleGetType();
    },
    /* 修改打印单价 */
    submitPriceForm(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          this.changePriceDialog = false;
          this.deliverList.forEach(item => {
            item.printPrice = this.priceForm.price;
          })
        } else {
          return false;
        }
      })
    },
    /* 生成uuid */
    // generateUUID() {
    //   var d = new Date().getTime();
    //   if (window.performance && typeof window.performance.now === "function") {
    //     d += performance.now(); //use high-precision timer if available
    //   }
    //   var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    //     var r = (d + Math.random() * 16) % 16 | 0;
    //     d = Math.floor(d / 16);
    //     return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    //   });
    //   return uuid;
    // },
    /* 保存发货单 */
    saveDeliverList(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          if (!this.deliverList || this.deliverList.length <= 0) {
            Message.warning("请导入发货单信息");
          } else {
            this.$router.go(-1);
          }
          this.deliverInfo.deliverBusiness = this.deliverList;
          this.deliverInfo.deliveryShelfList = this.shelfList;
          updateDeliver(this.deliverInfo).then(res => {
            if (res.code == 200) {
              this.$message.success(res.msg)
            } else {
              this.$message.error(res.msg)
            }
          })
        } else {
          return false;
        }
      });
    },
    /* 取消 */
    addBack() {
      this.$router.go(-1);
    },
  }
}
</script>

<style lang="scss" scoped>
.title {
  border: 1px solid #dfe6ec;
  box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.3);
  border-radius: 15px;
  padding-left: 30px;
}

::v-deep .containerTop {
  height: 46%;
  position: relative;
  //margin-bottom: 10px;

  .changeBtn {
    position: absolute;
    right: 10px;
    top: 2px;
    border: none;
    background-color: transparent;
    color: #46a6ff;
    font-size: 13px
  }

  .deliverDiv {
    display: flex;
    height: calc(100% - 50px);
    margin-top: 5px;

    .deliverInfo {
      width: 50%;
      height: 100%;

      .el-form {
        height: 100%;
        overflow: auto;
        padding: 0;
        align-items: flex-start;

        //.el-input-number--mini {
        //  width: 160px;
        //}
      }
    }

    .deliverPerson {
      width: 50%;
      height: 100%;
      margin-left: 5px;
      overflow: auto;

      .shelfList {
        height: calc(100% - 50px);

        .table {
          height: 100%;
          border-bottom: 1px solid #dfe6ec;

          .el-radio {
            margin-right: 10px;
          }
        }

        .page {
          display: none;
        }
      }
    }
  }
}

.containerCenter {
  display: flex;
  justify-content: space-between
}

.deliverList {
  height: calc(54% - 100px);

  ::v-deep .table {
    height: 100%;

    ::v-deep .el-table {
      height: 100%;

      .el-table__body-wrapper {
        height: calc(100% - 45px);
      }
    }
  }

  ::v-deep .page {
    display: none;
  }

}

.hiddenForm {
  .containerTop {
    height: 35px;

    .deliverDiv {
      display: none;
    }
  }

  .deliverList {
    height: calc(100% - 130px);
  }
}

.selectShelfDialog {
  height: 100%;

  ::v-deep .el-dialog {
    height: 70%;

    .el-dialog__body {
      padding: 10px;
      height: calc(100% - 92px);
      overflow: hidden;

      .el-form {
        display: flex;
        flex-wrap: wrap;

        .el-form-item {
          min-width: 300px;
        }

      }

      .rightTable, .tableContainer {
        height: calc(100% - 50px);
        margin-top: 10px;
      }
    }
  }
}

.getTypeDialog {
  .el-form {
    min-height: 80px;
  }
}

//表单中只有一个item
::v-deep .onlyOneChild {
  display: flex;
  justify-content: center;
  align-items: center;

  .el-form-item {
    width: 80%;
    justify-content: center;
    margin-right: 0;

    .el-form-item__label {
      width: 180px;
    }
  }
}
</style>

