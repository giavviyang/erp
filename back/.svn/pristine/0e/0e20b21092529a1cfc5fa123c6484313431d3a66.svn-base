<template>
  <div class="app-container-padding">
    <el-form :model="queryParams" ref="queryForm" size="mini" :inline="true" class="iptAndBtn">
      <el-form-item label="打包日期" class="daterange">
        <el-date-picker
          v-model="packagingDateRange"
          type="daterange"
          range-separator="至"
          start-placeholder="开始日期"
          end-placeholder="结束日期"
          value-format="yyyy-MM-dd"  @change="handleQuery">
        </el-date-picker>
      </el-form-item>
      <!--      <el-form-item>-->
      <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
      <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
      <!--      </el-form-item>-->
    </el-form>
    <div class="btn">
      <el-button
        type="primary"
        icon="el-icon-s-order"
        size="mini"
        @click="handleDetails"
        v-hasPermi="['sales:pack:info']">查看明细
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-plus"
        size="mini"
        @click="handleAdd"
        v-hasPermi="['sales:pack:addPack']">新增打包
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-edit"
        size="mini"
        @click="handleUpdate"
        v-hasPermi="['sales:pack:updatePack']">编辑打包
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-delete"
        size="mini"
        @click="handleDelete"
        v-hasPermi="['sales:pack:delPack']">删除打包
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-printer"
        size="mini"
        @click="handlePrint"
        v-hasPermi="['sales:pack:print']">打印
      </el-button>
      <el-dropdown>
        <el-button type="primary" size="mini" v-hasPermi="['sales:pack:exportDetail']">
          <i class="iconfont icon-daochuwenjian"></i>导出<i class="el-icon-arrow-down el-icon--right"></i>
        </el-button>
        <el-dropdown-menu slot="dropdown">
          <el-dropdown-item @click.native="exportFlow(0)"><i class="iconfont icon-daochuwenjian"></i>导出打包信息
          </el-dropdown-item>
          <el-dropdown-item @click.native="exportFlow(1)"><i class="iconfont icon-daochuwenjian"></i>导出打包明细
          </el-dropdown-item>
        </el-dropdown-menu>
      </el-dropdown>
    </div>
    <count-table class="returnTable" @handleChange="handleChange" :pageSize="pageSize" :pageNum="pageNum"
                 :total="total" :summation="summation">
      <el-table highlight-current-row
                :data="packingList"
                stripe
                border
                style="width: 100%"
                height="100%"
                ref="multipleTable"
                @selection-change="handleSelectionChange"
                @row-click="handleRowClick"
                slot="table">
        <el-table-column
          type="selection"
          width="55">
        </el-table-column>
        <el-table-column
          :index="getIndex"
          type="index"
          label="序号"
          width="55" show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          v-for="(item,index) in packingColumns"
          :key="index"
          :label="item.label"
          :prop="item.prop"
          :min-width="item.width"
          show-overflow-tooltip>
          <el-table-column :prop="item.prop" show-overflow-tooltip min-width="100" :min-width="item.width">
            <template #header scoped-slot="scope">
              <!--可根据类型来显示为搜索框、下拉框等-->
              <el-input
                v-model="queryParams[item.prop]"
                v-if="item.type==='ipt'"
                size="mini"
                placeholder="请输入"
                clearable @keyup.enter.native="handleQuery"/>
              <el-select v-if="item.type=='select'" v-model="queryParams[item.prop]" placeholder='请选择' clearable
                         size="mini" ref='statusSelect' @change="handleQuery">
                <el-option
                  v-for="item in dict.type.sys_pack"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </template>
          </el-table-column>
        </el-table-column>
      </el-table>
    </count-table>
    <!--  查看明细弹窗  -->
    <el-dialog title='查看明细'
               :visible.sync="detailDialog" width="80%" class="dialog-style detailDialog"
               :close-on-click-modal="false" :close-on-press-escape="false" :destroy-on-close="true">
      <div class="detailsInfo">
        <p v-for="(item,index) in detailsInfo" :key="index">{{ item.title }}：<span>{{ item.value }}</span></p>
      </div>
      <slot-table class="detailsTable">
        <el-table highlight-current-row
                  :data="detailDialogData"
                  border
                  stripe
                  height="100%"
                  style="width: 100%" slot="table">
          <el-table-column
            type="index"
            label="序号"
            width="50">
          </el-table-column>
          <el-table-column
            v-for="(item,index) in detailDialogColumns"
            :key="index"
            :prop="item.prop"
            :label="item.label"
            :min-width="item.width"
            show-overflow-tooltip></el-table-column>
        </el-table>
      </slot-table>
    </el-dialog>
    <!--  新增、编辑打包  -->
    <el-dialog :title="packingDialogType=='add'?'新增打包':packingDialogType=='edit'?'编辑打包':''"
               :visible.sync="packingDialog" width="90%" class="dialog-style publicAddDialog"
               :close-on-click-modal="false" :close-on-press-escape="false" :destroy-on-close="true">
      <div class="addInfo">
        <p class="title1">打包信息</p>
        <div class="addInfoContainer">
          <el-form :model="packingInfo" size="mini" :inline="true" ref="ruleForm"  class="ipt2">
            <el-form-item label="打包编号">
              <el-input v-model="packingInfo.packagingNo" disabled clearable  placeholder="请输入打包编号"/>
            </el-form-item>
            <el-form-item label="打包名称" prop="packagingName">
              <el-input v-model="packingInfo.packagingName" clearable placeholder="请输入打包名称"/>
            </el-form-item>
            <el-form-item label="打包负责人" prop="responsiblePerson">
              <el-input v-model="packingInfo.responsiblePerson" clearable placeholder="请输入打包负责人"/>
            </el-form-item>
            <el-form-item label="打包日期" prop="packagingDate">
              <el-date-picker
                v-model="packingInfo.packagingDate"
                type="date"
                placeholder="选择日期时间"
                value-format="yyyy-MM-dd">
              </el-date-picker>
            </el-form-item>
            <el-form-item label="打包方式" prop="packagingMode">
              <el-select v-model="packingInfo.packagingMode" placeholder='请选择打包方式'>
                <el-option
                  v-for="item in dict.type.sys_pack"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value" >
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="打包费用（元）" prop="packagingCost">
              <el-input v-model="packingInfo.packagingCost" clearable  placeholder="请输入打包费用（元）"/>
            </el-form-item>
            <el-form-item label="备注" class="remarks">
              <el-input v-model="packingInfo.remarks" type="textarea" clearabl size="mini" placeholder="请输入内容" />
            </el-form-item>
          </el-form>
        </div>
      </div>
      <div class="btnTable">
        <div class="btn">
          <el-button
            type="primary"
            icon="el-icon-folder-add"
            size="mini"
            v-hasPermi="['system:role:add']"
            @click="handleExportProduct">导入订单产品
          </el-button>
          <el-button
            type="primary"
            icon="el-icon-folder-remove"
            size="mini"
            @click="handleRemoveProduct">移除
          </el-button>
        </div>
        <slot-table class="addTable" v-if="packingDialogType==='add'">
          <el-table highlight-current-row
                    :data="packingData"
                    border
                    stripe
                    height="100%"
                    style="width: 100%"
                    ref="productTable"
                    @selection-change="handleProductRemove"
                    @row-click="RowClickProductRemove"
                    slot="table">
            <el-table-column
              type="selection"
              width="55">
            </el-table-column>
            <el-table-column
              type="index"
              label="序号"
              width="50">
            </el-table-column>
            <el-table-column
              v-for="(item,index) in addPackingDataColumns"
              :key="index"
              :prop="item.prop"
              :label="item.label"
              :min-width="item.width"
              show-overflow-tooltip></el-table-column>
            <el-table-column label="打包数量" width="200" class-name="noShelfNum">
              <template slot-scope="scope">
                <el-input-number size="mini" v-model="scope.row.noShelfNum" :min="1"
                                 :max="Number(scope.row.num)-Number(scope.row.orderPackNum)"></el-input-number>
              </template>
            </el-table-column>
          </el-table>
        </slot-table>
        <slot-table class="addTable" v-if="packingDialogType==='edit'">
          <el-table highlight-current-row
                    :data="packingData"
                    border
                    stripe
                    height="100%"
                    style="width: 100%"
                    ref="productTable"
                    @selection-change="handleProductRemove"
                    @row-click="RowClickProductRemove"
                    slot="table">
            <el-table-column
              type="selection"
              width="55">
            </el-table-column>
            <el-table-column
              type="index"
              label="序号"
              width="50">
            </el-table-column>
            <el-table-column
              v-for="item in editPackingDataColumns"
              :key="item.id"
              :prop="item.prop"
              :label="item.label"
              :min-width="item.width"
              show-overflow-tooltip></el-table-column>
            <el-table-column label="打包数量" width="200" class-name="noShelfNum">
              <template slot-scope="scope">
                <el-input-number size="mini" v-model="scope.row.updatePackNum" :min="1"
                                 :max="Number(scope.row.notPackNum) + Number(scope.row.packNum)"></el-input-number>
              </template>
            </el-table-column>
          </el-table>
        </slot-table>
      </div>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" size="mini" @click="savePacking('ruleForm')">保存</el-button>
        <el-button size="mini" @click="closePacking">取消</el-button>
      </span>
    </el-dialog>
    <!--   导入订单产品 -->
    <el-dialog title="导入订单产品" :visible.sync="exportDialog" width="75%" class="dialog-style exportList"
               :close-on-click-modal="false" :close-on-press-escape="false" :destroy-on-close="true" append-to-body>
      <el-form :model="exportParams" size="mini" :inline="true" class="iptAndBtn1">
        <el-form-item label="订单编号">
          <el-input @keyup.enter.native="handleProduct" v-model="exportParams.orderNo" clearable placeholder="请输入订单编号"/>
        </el-form-item>
        <el-form-item label="自定义编号">
          <el-input @keyup.enter.native="handleProduct" v-model="exportParams.customNo" clearable placeholder="请输入自定义编号"/>
        </el-form-item>
        <el-form-item label="项目名称">
          <el-input @keyup.enter.native="handleProduct" v-model="exportParams.entryName" placeholder="请输入项目名称" clearable/>
        </el-form-item>
        <el-form-item label="客户名称">
          <el-select ref="customerName" @keyup.enter.native="handleProduct" @keydown.enter.native="disableVisible"
                     v-model="exportParams.customerName" filterable placeholder="请选择客户" clearable>
            <el-option
              v-for="(item,index) in customerNameList"
              :key="index"
              :label="item.customerName"
              :value="item.customerName">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" icon="el-icon-search" size="mini" @click="handleProduct">搜索</el-button>
        </el-form-item>

      </el-form>
      <slot-table class="tableList">
        <el-table highlight-current-row
                  :data="productList"
                  border
                  stripe
                  height="100%"
                  style="width: 100%"
                  ref="productListTable"
                  @selection-change="handleProductList"
                  @row-click="RowClickproductList"
                  slot="table">
          <el-table-column
            type="selection"
            width="55">
          </el-table-column>
          <el-table-column
            type="index"
            :index="getProductIndex"
            label="序号"
            width="50">
          </el-table-column>
          <el-table-column
            v-for="(item,index) in packingDataColumns"
            :key="index"
            :label="item.label"
            :prop="item.prop"
            :min-width="item.width"
            show-overflow-tooltip>
          </el-table-column>
        </el-table>
      </slot-table>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" size="mini" @click="addProductList">添加</el-button>
         <el-button size="mini" @click="backProductList">返回</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>

import SlotTable from "@/components/public/table/SlotTable";
import {Message} from "element-ui";
import {
  queryPackData,
  productionNumber,
  queryPackProduct,
  addPack,
  detailsView,
  updateDetails,
  updatePack,
  delPack
} from "@/api/salse/order/pack"
import {customerList} from "@/api/system/customer"
import {getCurrentDay, keepThreeNum} from "@/utils/order/order";
import CountTable from "@/components/public/table/countTable";
import {delDeliver} from "@/api/salse/deliver";

export default {
  dicts: ['sys_pack'],
  name: "index",
  components: {CountTable, SlotTable},
  data() {
    return {
      //查询参数
      queryParams: {
        customerName: "",
        deliverPerson: "",
        id: "",
        orderId: "",
        orderNo: "",
        packagingDateEnd: "",
        packagingDateStart: "",
        packagingMode: "",
        packagingName: "",
        packagingNo: "",
        pageNum: 1,
        pageSize: 20,
        productName: "",
        projectName: "",
        responsiblePerson: ""
      },
      packagingDateRange: [], //打包日期范围
      pageSize: 20,
      pageNum: 1,
      total: 0,
      summation: [
        {label: 'packNum', title: '打包数量', value: 0, unit: '片'},
        {label: 'packagingArea', title: '打包面积', value: 0, unit: 'm²'},
        {label: 'packagingWeight', title: '打包重量', value: 0, unit: 't'},
      ],
      packingList: [],  //打包列表
      //打包表头
      packingColumns: [
        {label: '打包编号', prop: 'packagingNo', width: '130', type: 'ipt'},
        {label: '打包名称', prop: 'packagingName', width: '120', type: 'ipt'},
        {label: '订单编号', prop: 'orderNo', width: '120', type: 'ipt'},
        {label: '自定义编号', prop: 'customNo', width: '120'},
        {label: '客户名称', prop: 'customerName', width: '120', type: 'ipt'},
        {label: '项目名称', prop: 'entryName', width: '180'},
        {label: '打包产品', prop: 'productName', width: '150', type: 'ipt'},
        {label: '打包负责人', prop: 'responsiblePerson', width: '100', type: 'ipt'},
        {label: '打包方式', prop: 'packagingMode', width: '120', type: 'select'},
        {label: '打包数量（片）', prop: 'packNum', width: '110'},
        {label: '打包面积（m²）', prop: 'packagingArea', width: '120'},
        {label: '打包重量（t）', prop: 'packagingWeight', width: '120'},
        {label: '打包日期', prop: 'packagingDate', width: '180'},
        {label: '发货状态', prop: 'deliverState', width: '180'},
        {label: '备注', prop: 'remarks', width: '120'},
      ],
      selected: [],
      detailDialog: false,  //明细弹窗
      //明细信息
      detailsInfo: [
        {title: '打包编号', label: 'packagingNo', value: ''},
        {title: '打包名称', label: 'packagingName', value: ''},
        {title: '订单编号', label: 'orderNo', value: ''},
        {title: '客户名称', label: 'customerName', value: ''},
        {title: '项目名称', label: 'entryName', value: ''},
        {title: '打包方式', label: 'packagingMode', value: ''},
        {title: '打包负责人', label: 'responsiblePerson', value: ''},
        {title: '备注', label: 'remarks', value: ''},
      ],
      detailDialogData: [],  //回收站明细数据
      //订单明细表头
      detailDialogColumns: [
        {label: '订单编号', prop: 'orderNo', width: '120'},
        {label: '自定义编号', prop: 'customNo', width: '120'},
        {label: '项目名称', prop: 'entryName', width: '200'},
        {label: '产品名称', prop: 'productName', width: '200'},
        {label: '宽（mm）', prop: 'wideHead', width: '110'},
        {label: '高（mm）', prop: 'highHead', width: '110'},
        {label: '产品数量（片）', prop: 'num', width: '100'},
        {label: '打包数量（片）', prop: 'packNum', width: '100'},
      ],
      packingDialogType: 'add',  //新增
      packingDialog: false,  //新增、编辑弹窗
      packingInfo: {
        packagingNo: '',
        packagingName: '',
        responsiblePerson: '',
        packagingDate: '',
        packagingMode: '',
        packagingCost: '',
        customerName: '',
        remarks: '',
        list: []
      },
      //打包客户集合
      customerNameList: [],
      // 打包时间不能晚于当前时间
      // preparationDateOptions: {
      //   disabledDate: time => {
      //     return time.getTime() > Date.now()
      //   },
      // },
      packingData: [],  //打包表格
      packingDataColumns: [
        {label: '订单编号', prop: 'orderNo', width: '140'},
        {label: '自定义编号', prop: 'customNo', width: '120'},
        {label: '客户名称', prop: 'customerName', width: '120'},
        {label: '项目名称', prop: 'entryName', width: '180'},
        {label: '产品名称', prop: 'productName', width: '150'},
        {label: '宽（mm）', prop: 'wideHead', width: '110'},
        {label: '高（mm）', prop: 'highHead', width: '110'},
        {label: '产品数量（片）', prop: 'num', width: '120'},
        {label: '入库数量（片）', prop: 'warehousingQuantity', width: '120'},
        {label: '已打包数量（片）', prop: 'orderPackNum', width: '120'},
        // /*______编辑打包字段----------*/
        // {label: '未打包数量（片）', prop: 'notPackNum', width: '100'},
        // {label: '打包数量（片）', prop: 'orderPackNum', width: '100'},
      ],
      addPackingDataColumns: [
        {label: '订单编号', prop: 'orderNo', width: '120'},
        {label: '自定义编号', prop: 'customNo', width: '120'},
        {label: '客户名称', prop: 'customerName', width: '200'},
        {label: '项目名称', prop: 'entryName', width: '200'},
        {label: '产品名称', prop: 'productName', width: '150'},
        {label: '宽（mm）', prop: 'wideHead', width: '110'},
        {label: '高（mm）', prop: 'highHead', width: '110'},
        {label: '产品数量（片）', prop: 'num', width: '120'},
        {label: '入库数量（片）', prop: 'warehousingQuantity', width: '120'},
        {label: '已打包数量（片）', prop: 'orderPackNum', width: '120'},
      ],
      editPackingDataColumns: [
        {label: '订单编号', prop: 'orderNo', width: '120'},
        {label: '自定义编号', prop: 'customNo', width: '120'},
        {label: '客户名称', prop: 'customerName', width: '200'},
        {label: '项目名称', prop: 'entryName', width: '200'},
        {label: '产品名称', prop: 'productName', width: '150'},
        {label: '宽（mm）', prop: 'wideHead', width: '110'},
        {label: '高（mm）', prop: 'highHead', width: '110'},
        {label: '产品数量（片）', prop: 'num', width: '120'},
        {label: '未打包数量（片）', prop: 'notPackNum', width: '120'},
        {label: '前打包数量（片）', prop: 'packNum', width: '120'},
      ],
      selectedProduct: [],  //选择产品信息移除
      exportDialog: false,  //导入产品信息弹窗
      //导入产品信息查询条件
      exportParams: {
        id: '',
        orderNo: '',
        customNo: '',
        customName: '',
        customerName: '',
        entryName: '',
        pageSize: 20,
        pageNum: 1,
      },
      pageSizeProduct: 20,
      pageNumProduct: 1,
      totalProduct: 0,
      productList: [], //导入弹窗的产品信息数据
      selectedProductList: [],
      exportDateRange: [],  //导入发货日期范围查询
      // 表单校验
      rules: {
        packagingName: [
          {required: true, message: "打包名称不能为空", trigger: "blur"},
          {max: 20, message: '字符长度最大不得超过20', trigger: 'blur'}
        ],
        responsiblePerson: [
          // {required: true, message: "打包负责人不能为空", change: "blur"},
          {max: 10, message: '字符长度最大不得超过10', trigger: 'blur'}
        ],
        packagingMode: [
          {required: true, message: "打包方式不能为空", trigger: "blur"},
          {max: 20, message: '字符长度最大不得超过20', trigger: 'blur'}
        ],
        packagingDate: [
          {required: true, message: '打包日期不能为空', trigger: 'blur'}
        ],
        customerName: [
          {required: true, message: "客户名称不能为空", change: "blur"},
          {max: 40, message: '字符长度最大不得超过40', trigger: 'blur'}
        ],
        packagingCost: [
          {pattern: /^[+]?(0|([1-9]\d*))(\.\d+)?$/g, message: '请输入整数或小数'}
        ],
      },
    }
  },
  created() {
    this.handleQuery();
  },
  mounted() {
    // this.keyupSubmit();
    var multipleTable = this.$refs.multipleTable.$refs.bodyWrapper
    multipleTable.addEventListener('scroll', () => {
      // 滚动距离
      const scrollLeft = multipleTable.scrollLeft;
      // this.$refs.multipleTable.$refs.bodyWrapper.scrollLeft = scrollLeft
      this.$refs.multipleTable.$refs.headerWrapper.scrollLeft = scrollLeft
    })
  },
  computed: {
    disableVisible() {
      this.$refs.customerName.visible = false
    }
  },
  methods: {

    //键盘按下enter搜索事件
    keyupSubmit() {
      document.onkeydown = e => {
        const _key = window.event.keyCode
        if (_key === 13) {
          this.handleQuery();
        }
      }
    },
    /* 订单查询 */
    handleQuery() {
      if (this.packagingDateRange) {
        this.queryParams.packagingDateStart = this.packagingDateRange[0];
        this.queryParams.packagingDateEnd = this.packagingDateRange[1];
      } else {
        this.queryParams.packagingDateStart = '';
        this.queryParams.packagingDateEnd = '';
      }
      queryPackData(this.queryParams).then(res => {
        if (res.code === 200) {
          this.packingList = res.data;
          this.total = res.count;
          if (this.packingList) {
            this.summation = [
              {label: 'packNum', title: '打包数量', value: 0, unit: '片'},
              {label: 'packagingArea', title: '打包面积', value: 0, unit: 'm²'},
              {label: 'packagingWeight', title: '打包重量', value: 0, unit: 't'},
            ];
            this.packingList.forEach(item => {
              this.summation.forEach(sumItem => {

                if (item.hasOwnProperty(sumItem.label)) {
                  sumItem.value += item[sumItem.label]
                }
                sumItem.value = keepThreeNum(sumItem.value);
              })
            })
          }
        }
      })
    },
    /* 重置 */
    resetQuery() {
      this.packagingDateRange = [];
      this.queryParams = {
        customerName: "",
        deliverPerson: "",
        id: "",
        orderId: "",
        orderNo: "",
        packagingDateEnd: "",
        packagingDateStart: "",
        packagingMode: "",
        packagingName: "",
        packagingNo: "",
        pageNum: 1,
        pageSize: 20,
        productName: "",
        projectName: "",
        responsiblePerson: ""
      };
      this.handleQuery();
    },
    // 是否显示下拉框
    isShowSelectOptions(isShowSelectOptions) {
      if (!isShowSelectOptions) {
        this.$refs.statusSelect.forEach(item => {
          item.blur();
          this.handleQuery();
        })
      }
    },
    /* 查看明细 */
    handleDetails() {
      if (this.selected.length <= 0) {
        Message.warning("请选择要查看的数据");
        return false
      }
      if (this.selected.length > 1) {
        Message.warning("请选择一条数据进行查看");
        return false
      }
      if (this.selected.length == 1) {
        this.detailsInfo.forEach(item => {
          if (this.selected[0].hasOwnProperty(item.label)) {
            item.value = this.selected[0][item.label]
          }
        })
        detailsView({id: this.selected[0].id}).then(res => {
          this.detailDialogData = res.data;
        })
        this.detailDialog = true;
      }
    },
    /* 新增打包 */
    handleAdd() {
      this.packingDialogType = 'add';
      this.packingData = [];
      this.packingInfo = {
        packagingNo: '',
        packagingName: '',
        responsiblePerson: localStorage.getItem("nickName"),
        packagingDate: getCurrentDay(),
        packagingMode: '',
        packagingCost: '',
        customerName: '',
        remarks: '',
      };
      productionNumber().then(res => {
        if (res.code === 200) {
          this.packingInfo.packagingNo = res.msg;
        }
      })
      let param = {
        pagenum: 1,
        pageSize: 10000
      }
      customerList(param).then(res => {
        this.customerNameList = res.data;
      })
      this.packingDialog = true;
    },
    /* 编辑打包 */
    handleUpdate() {
      if (this.selected.length != 1) {
        Message.warning("请选择一条数据进行修改");
        return false
      }
      if (this.selected.length == 1) {
        if (this.selected[0].deliverState != "未发货") {
          Message.warning("当前打包数据已发货，无法继续编辑打包");
        } else {
          this.packingInfo = JSON.parse(JSON.stringify(this.selected[0]));
          updateDetails({id: this.selected[0].id}).then(res => {
            this.packingData = res.data;
          })
          this.packingDialog = true;
          this.packingDialogType = 'edit';
        }
      }
    },
    /* 删除打包 */
    handleDelete() {
      if (this.selected.length <= 0) {
        Message.warning("请选择要删除的数据");
        return;
      }else {
        let ids = [];
        for (let i = 0; i <this.selected.length; i++) {
          if (this.selected[i].deliverState != "未发货") {
            Message.warning("当前打包数据“" + this.selected[i].packagingName + "”已发货，无法删除")
            return
          }
          ids.push(this.selected[i].id)
        }
        this.$confirm('此操作将删除选中数据，是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          delPack({ids: ids.toString()}).then(res => {
            if (res.code === 200) {
              this.$message.success(res.msg)
              this.handleQuery();
            } else {
              this.$message.warning(res.msg)
              this.handleQuery();
            }
          })

        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          });
        });
      }
    },
    /* 导出打包 */
    exportFlow(param) {
      let ids = [];
      if (this.selected.length > 0) {
        this.selected.forEach(item => {
          ids.push(item.id)
        })
      }
      if (param === 0) {//导出打包信息
        this.download('/sales/pack/exportPack', {
          ids: ids.toString()
        }, `打包信息.xlsx`)
      } else if (param === 1) {//导出打包明细
        this.download('/sales/pack/exportPackDetailed', {
          ids: ids.toString()
        }, `打包明细.xlsx`)
      }
    },
    /* 打印打包 */
    handlePrint() {

    },
    /* 打包单翻页后序号连贯 */
    getIndex($index) {
      //  表格序号
      return (this.pageNum - 1) * this.pageSize + $index + 1;
    },
    /* 打包复选框 */
    handleSelectionChange(val) {
      this.selected = val;
    },
    /* 行点击事件 */
    handleRowClick(row, column, event) {
      this.$refs.multipleTable.toggleRowSelection(row, column)
    },
    /* 打包单分页器 */
    handleChange(size, num) {
      this.pageSize = size;
      this.pageNum = num;
      this.queryParams.pageNum = this.pageNum;
      this.queryParams.pageSize = this.pageSize;
      this.handleQuery();
    },
    /* 打开产品信息弹窗 */
    handleExportProduct() {
      this.handleProduct();
      this.exportDialog = true;
    },
    /* 移除产品信息 */
    handleRemoveProduct() {
      if (this.packingData.length <= 0) {
        Message.warning("请先导入产品信息");
      } else {
        if (this.selectedProduct.length <= 0) {
          Message.warning("请选择需要移除的数据");
        } else {
          this.selectedProduct.forEach(item => {
            var number = this.packingData.indexOf(item);
            this.packingData.splice(number, 1)
          })
        }
      }
    },
    /* 选择产品信息复选框移除 */
    handleProductRemove(val) {
      this.selectedProduct = val;
    },
    /* 产品信息移除行点击事件 */
    RowClickProductRemove(row, column, event) {
      this.$refs.productTable.toggleRowSelection(row, column)
    },
    /* 保存打包 */
    savePacking(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          if (this.packingData.length <= 0) {
            Message.warning("请导入产品信息进行打包");
          } else {
            let addCount = 0
            let editCount = 0
            this.packingData.forEach(item => {
              if (item.noShelfNum) {
                addCount++
              }
              if (item.updatePackNum) {
                editCount++
              }
            })
            if (this.packingDialogType == 'add') {
              if (!addCount) {
                Message.warning("请输入打包数量");
              } else {
                this.packingInfo.list = this.packingData
                addPack(this.packingInfo).then(res => {
                  if (res.code === 200) {
                    Message.success(res.msg)
                    this.packingDialog = false
                    this.handleQuery();
                  } else {
                    Message.error(res.msg);
                    this.packingDialog = false
                    this.handleQuery();
                  }
                })
                return false
              }
            }
            if (this.packingDialogType == 'edit') {
              if (!editCount) {
                Message.warning("请输入打包数量");
              } else {
                this.packingInfo.packList = this.packingData
                updatePack(this.packingInfo).then(res => {
                  if (res.code === 200) {
                    Message.success(res.msg)
                    this.packingDialog = false
                    this.handleQuery();
                  } else {
                    Message.error(res.msg);
                    this.packingDialog = false
                    this.handleQuery();
                  }
                })
                return false
              }
            }
          }
        } else {
          return false;
        }
      })
    },
    closePacking() {
      this.packingDialog = false;
      this.packingInfo={};
    },
    /* 导入产品信息查询 */
    handleProduct() {
      queryPackProduct(this.exportParams).then(res => {
        this.productList = res.data;
        this.totalProduct = res.count;
      })
    },
    /* 导入产品信息分页器 */
    handleChangeDeliver(size, num) {
      this.pageSizeProduct = size;
      this.pageNumProduct = num;
      this.exportParams.pageNum = this.pageNumProduct;
      this.exportParams.pageSize = this.pageSizeProduct;
      this.handleProduct();
    },
    /* 产品信息 翻页后序号连贯 */
    getProductIndex($index) {
      //  表格序号
      return (this.pageNumProduct - 1) * this.pageSizeProduct + $index + 1;
    },
    /* 选择导入产品信息数据 */
    handleProductList(val) {
      this.selectedProductList = val;
    },
    /* 导入产品信息行点击事件 */
    RowClickproductList(row, column, event) {
      this.$refs.productListTable.toggleRowSelection(row, column)
    },
    /* 添加导入产品信息 */
    addProductList() {
      if (this.selectedProductList.length <= 0) {
        Message.warning("请选择要添加的数据");
      } else {
        const name = new Set();
        this.selectedProductList.forEach(item => {
          name.add(item.customerName)
          if (item.orderPackNum != null) {
            item.noShelfNum = item.num - item.orderPackNum
          } else {
            item.noShelfNum = item.num
          }
          if (this.packingDialogType == 'edit') {
            item.notPackNum = item.noShelfNum
            item.packNum = 0;
            item.updatePackNum = item.notPackNum
          }
        })
        if (name.size > 1) {
          Message.warning("请选择相同客户的产品！")
          return;
        }
        if (this.packingData.length > 0) {
          if (!name.has(this.packingData[0].customerName)) {
            Message.warning("请选择相同客户的产品！")
            return;
          }
        }
        for (let i = 0; i < this.selectedProductList.length; i++) {
          this.selectedProductList[i].productId = this.selectedProductList[i].id
          var index = this.productList.indexOf(this.selectedProductList[i]);
          for (let j = 0; j < this.packingData.length; j++) {
            if ( this.selectedProductList[i].productId == this.packingData[j].productId) {
              Message.warning("序号为" + (index + 1) + "的数据已经添加,不可重复添加！");
              return;
            }
          }
        }
        this.packingData.push(...this.selectedProductList);
        Message.success("导入产品信息成功");
      }
      this.$refs.productListTable.clearSelection();
    },
    /* 取消导入产品信息 */
    backProductList() {
      this.exportDialog = false;
      this.$refs.productListTable.clearSelection();
    },
  }
}
</script>

<style lang="scss" scoped>
.returnTable {
  height: calc(100% - 100px);
}

::v-deep .detailDialog {
  .el-dialog {
    height: calc(60vh);

    padding: 0;

    .detailsInfo {
      justify-content: flex-start;
      margin-bottom: 0;

      p {
        min-width: 310px;
      }
    }

    .detailsTable {
      height: calc(100% - 120px);
    }

  }
}

::v-deep .packingDialog {
  .el-dialog {
    height: calc(70vh);

    .el-dialog__body {
      height: calc(100% - 90px);

      .packingInfo {
        height: 25%;
        border-radius: 15px;
        box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.3);
        //margin-bottom: 10px;

        .title {
          height: 30px;
          padding-left: 40px;
          margin-bottom: 0 !important;
        }

        .packingInfoContainer {
          height: calc(100% - 30px);
          overflow: auto;
          background: rgba(100, 200, 188, 0.05);
          border: 1px solid rgba(100, 200, 188, 0.5);
          border-bottom-left-radius: 15px;
          border-bottom-right-radius: 15px;

          .ipt2 {
            justify-content: start;

            .el-form-item {
              width: 350px;
            }

            .remarks {
              width: 700px;
            }
          }


        }
      }

      .productTable {
        height: calc(75% - 48px);

        .table {
          height: 100%;
          border-right: 1px solid #dfe6ec;
        }

        .page {
          display: none;
        }
      }
    }

  }

}

/*
.exportProductList {
  ::v-deep .el-dialog {
    height: calc(60vh);

    .el-dialog__body {
      height: calc(100% - 90px);
      padding-bottom: 0;

      .productList {
        height: calc(100% - 100px);
        margin: 10px 0;
      }

      .iptAndBtn {
        height: 80px;
        flex-wrap: wrap;

        .el-form-item {
          width: 31%;
        }
      }
    }

  }
}
*/

::v-deep .noShelfNum {
  .cell {
    .el-input-number {
      width: 150px;
    }
  }
}


</style>
