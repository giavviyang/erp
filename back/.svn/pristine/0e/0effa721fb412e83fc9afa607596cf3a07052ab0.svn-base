<template>
  <div class="app-container-padding">
    <el-form :model="queryParams" ref="queryForm" size="mini" :inline="true" class="iptAndBtn">
      <el-form-item label="制单日期" class="daterange">
        <el-date-picker
          v-model="preparationDateRange"
          type="daterange"
          range-separator="至"
          start-placeholder="开始日期"
          end-placeholder="结束日期"
          value-format="yyyy-MM-dd" @change="handleQuery">
        </el-date-picker>
      </el-form-item>
      <!--      <el-form-item>-->
      <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
      <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
      <!--      </el-form-item>-->
    </el-form>
    <div class="btn">
      <el-button
        type="primary"
        icon="el-icon-s-order"
        size="mini"
        @click="handleDetails"
        v-hasPermi="['sales:order:detail']">查看明细
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-copy-document"
        size="mini"
        @click="handleRestore" v-hasPermi="['sales:order:reductionOrder']">还原订单
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-delete"
        size="mini"
        @click="handleDelete"
        v-hasPermi="['sales:order:delOrder']">删除订单
      </el-button>
      <el-button
        type="primary"
        icon="el-icon-delete-solid"
        size="mini"
        @click="handleDeleteAll"
        v-hasPermi="['sales:order:delOrderAll']">清空订单
      </el-button>
    </div>
    <count-table class="recycleTable" @handleChange="handleChange" :pageSize="pageSize"
                 :pageNum="pageNum"
                 :total="total" :summation="summation">
      <el-table highlight-current-row
                :data="recycleList"
                stripe
                border
                style="width: 100%"
                height="100%"
                ref="multipleTable"
                @selection-change="handleSelectionChange"
                @row-click="handleRowClick"
                slot="table">
        <el-table-column
          type="selection"
          width="55">
        </el-table-column>
        <el-table-column
          :index="getIndex"
          type="index"
          label="序号"
          width="55" show-overflow-tooltip>
        </el-table-column>
        <el-table-column
          v-for="(item,index) in recycleColumns"
          :key="index"
          :label="item.label"
          :prop="item.prop"
          :min-width="item.width"
          show-overflow-tooltip>
          <el-table-column :prop="item.prop" show-overflow-tooltip :min-width="item.width">
            <template #header scoped-slot="scope">
              <!--可根据类型来显示为搜索框、下拉框等-->
              <el-input
                v-if="item.type=='ipt'"
                v-model="queryParams[item.prop]"
                size="mini"
                placeholder="请输入"
                clearable  @keyup.enter.native="handleQuery"/>
              <el-select v-if="item.type=='select'" v-model="queryParams[item.prop]" placeholder='请选择' clearable
                         size="mini" ref='statusSelect' @change="handleQuery">
                <el-option
                  v-for="item in dict.type.order_type"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value"
                >
                </el-option>
              </el-select>
            </template>
          </el-table-column>
        </el-table-column>
      </el-table>
    </count-table>
    <!--  查看明细弹窗  -->
    <el-dialog title="查看明细" :visible.sync="detailDialog" width="80%" class="dialog-style detailDialog"
               :close-on-click-modal="false" :close-on-press-escape="false" :destroy-on-close="true">
      <div class="detailsInfo">
        <p v-for="(item,index) in detailsInfo" :key="index">{{ item.title }}：<span>{{ item.value }}</span></p>
      </div>
      <slot-table class="detailsTable">
        <el-table highlight-current-row
                  :data="detailDialogData"
                  border
                  stripe
                  height="100%"
                  style="width: 100%" slot="table">
          <el-table-column
            type="index"
            label="序号"
            width="50">
          </el-table-column>
          <el-table-column
            v-for="(item,index) in detailDialogColumns"
            :key="index"
            :prop="item.prop"
            :label="item.label"
            :min-width="item.width"
            show-overflow-tooltip></el-table-column>
        </el-table>
      </slot-table>
    </el-dialog>
  </div>
</template>

<script>

import SlotTable from "@/components/public/table/SlotTable";
import {Message} from "element-ui";
import {
  listOrder,
  listProduct,
  reallyDelOrder,
  reductionOrder
} from "@/api/salse/order/order";
import CountTable from "@/components/public/table/countTable";
import {keepThreeNum} from "@/utils/order/order";

export default {
  dicts: ['order_type'],
  name: "index",
  components: {CountTable, SlotTable},
  data() {
    return {
      //查询参数
      queryParams: {
        pageNum: 1,
        pageSize: 20,
        contactNumber: '',
        contacts: '',
        customNo: '',
        customerName: '',
        entryName: '',
        id: '',
        orderNo: '',
        orderType: '',
        preparationDateEnd: '',
        preparationDateStart: '',
        preparer: '',
        isDel: 1,
      },
      preparationDateRange: [], //制单日期范围
      recycleList: [],
      //回收站表头
      recycleColumns: [
        {label: '订单编号', prop: 'orderNo', width: '140', type: 'ipt'},
        {label: '订单类型', prop: 'orderType', width: '100', type: 'select'},
        {label: '自定义编号', prop: 'customNo', width: '120', type: 'ipt'},
        {label: '客户名称', prop: 'customerName', width: '120', type: 'ipt'},
        {label: '项目名称', prop: 'entryName', width: '180', type: 'ipt'},
        {label: '联系人', prop: 'contacts', type: 'ipt'},
        {label: '联系电话', prop: 'contactNumber', width: '120', type: 'ipt'},
        {label: '收货地址', prop: 'receiptAddress', width: '200', type: 'ipt'},
        {label: '总数量（片）', prop: 'orderNum', width: '120'},
        {label: '总周长（m）', prop: 'totalLengthen', width: '120'},
        {label: '总面积（m²）', prop: 'totalArea', width: '120'},
        {label: '总重量（t）', prop: 'totalWeigh', width: '120'},
        {label: '总金额（元）', prop: 'orderAmount', width: '120'},
        {label: '收货日期', prop: 'receiptDate', width: '180', type: 'ipt'},
        {label: '下单时间', prop: 'preparationDate', width: '180', type: 'date'},
        {label: '下单人', prop: 'preparer', type: 'ipt'},
      ],
      orderTypeOptions: [{
        value: 0,
        label: '普通订单'
      }, {
        value: 'rushOrder',
        label: '加急订单'
      }, {
        value: 'sampleOrder',
        label: '样品订单'
      }, {
        value: 'materialOrder',
        label: '来料订单'
      }, {
        value: 'outsourcingOrders',
        label: '外协订单'
      }],
      pageSize: 20,
      pageNum: 1,
      total: 0,
      summation: [
        {label: 'orderNum', title: '总数量', value: 0, unit: '片'},
        {label: 'totalLengthen', title: '总周长', value: 0, unit: 'm'},
        {label: 'totalArea', title: '总面积', value: 0, unit: 'm²'},
        {label: 'totalWeigh', title: '总重量', value: 0, unit: 't'},
        {label: 'orderAmount', title: '总金额', value: 0, unit: '元'},
      ],
      selected: [],
      detailDialog: false,
      //明细信息
      detailsInfo: [
        {title: '订单编号', label: 'orderNo', value: ''},
        {title: '自定义编号', label: 'customNo', value: ''},
        {title: '订单类型', label: 'orderType', value: ''},
        {title: '项目名称', label: 'entryName', value: ''},
        {title: '客户名称', label: 'customerName', value: ''},
        {title: '联系电话', label: 'contactNumber', value: ''},
        {title: '备注', label: 'remarks', value: ''},
      ],
      detailDialogData: [],  //回收站明细数据
      //订单明细表头
      detailDialogColumns: [
        {label: '产品名称', prop: 'productName', width: '200'},
        {label: '宽（mm）', prop: 'wideHead', width: '100'},
        {label: '高（mm）', prop: 'highHead', width: '100'},
        {label: '位置', prop: 'position', width: '100'},
        {label: '数量（片）', prop: 'num', width: '100'},
        {label: '总周长（mm）', prop: 'lengthen', width: '120'},
        {label: '单价（元/m²）', prop: 'unitPrice', width: '120'},
        {label: '面积（m²）', prop: 'productArea', width: '120'},
        {label: '重量（t）', prop: 'productWeight', width: '120'},
        {label: '总金额（元）', prop: 'productAmount', width: '120'},
        {label: '加工要求', prop: 'requirement'},
      ],
    }
  },
  created() {
    this.handleQuery();
  },
  mounted() {
    // // this.keyupSubmit();
    var multipleTable = this.$refs.multipleTable.$refs.bodyWrapper
    multipleTable.addEventListener('scroll', () => {
      // 滚动距离
      const scrollLeft = multipleTable.scrollLeft;
      this.$refs.multipleTable.$refs.headerWrapper.scrollLeft = scrollLeft
    })
  },
  methods: {

    // //键盘按下enter搜索事件
    // keyupSubmit() {
    //   document.onkeydown = e => {
    //     const _key = window.event.keyCode
    //     if (_key === 13) {
    //       this.handleQuery();
    //     }
    //   }
    // },
    /* 订单查询 */
    handleQuery() {
      if (this.preparationDateRange) {
        this.queryParams.preparationDateStart = this.preparationDateRange[0];
        this.queryParams.preparationDateEnd = this.preparationDateRange[1];
      } else {
        this.queryParams.preparationDateStart = '';
        this.queryParams.preparationDateEnd = '';
      }
      listOrder(this.queryParams).then(res => {
        if (res.code === 200) {
          this.recycleList = res.data;
          this.total = res.count;
          if (this.recycleList) {
            this.summation = [
              {label: 'orderNum', title: '总数量', value: 0, unit: '片'},
              {label: 'totalLengthen', title: '总周长', value: 0, unit: 'm'},
              {label: 'totalArea', title: '总面积', value: 0, unit: 'm²'},
              {label: 'totalWeigh', title: '总重量', value: 0, unit: 't'},
              {label: 'orderAmount', title: '总金额', value: 0, unit: '元'},
            ];
            this.recycleList.forEach(item => {
              this.summation.forEach(sumItem => {

                if (item.hasOwnProperty(sumItem.label)) {
                  sumItem.value += item[sumItem.label]
                }
                sumItem.value = keepThreeNum(sumItem.value);
              })
            })
          }
        }
      })
    },
    /* 重置 */
    resetQuery() {
      this.preparationDateRange = [];
      this.queryParams = {
        pageNum: 1,
        pageSize: 20,
        contactNumber: '',
        contacts: '',
        customNo: '',
        customerName: '',
        entryName: '',
        id: '',
        orderNo: '',
        orderType: '',
        preparationDateEnd: '',
        preparationDateStart: '',
        preparer: '',
        isDel: 1,
      };
      this.handleQuery();
    },
    // 是否显示下拉框
    isShowSelectOptions(isShowSelectOptions) {
      if (!isShowSelectOptions) {
        this.$refs.statusSelect.forEach(item => {
          item.blur();
          this.handleQuery();
        })
      }
    },
    /* 查看订单明细 */
    handleDetails() {
      if (this.selected.length <= 0) {
        Message.warning("请选择要查看的数据");
        return false
      }
      if (this.selected.length > 1) {
        Message.warning("请选择一条数据进行查看");
        return false
      }
      if (this.selected.length == 1) {
        this.detailDialog = true;
        this.detailsInfo.forEach(item => {
          if (this.selected[0].hasOwnProperty(item.label)) {
            item.value = this.selected[0][item.label]
          }
        })
        let params = {
          orderId: this.selected[0].id
        }
        listProduct(params).then(res => {
          this.detailDialogData = res.data;
        })
      }
    },
    /* 删除订单 */
    handleDelete() {
      if (this.selected.length <= 0) {
        Message.warning("请选择要删除的数据");
        return false
      }
      this.$confirm('此操作将永久删除选中数据，是否继续?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      }).then(() => {
        let ids = []
        this.selected.forEach(item => {
          ids.push(item.id)
        })
        reallyDelOrder({orderIds: ids.toString()}).then(res => {
          if (res.code === 200) {
            this.$message({
              type: 'success',
              message: res.msg
            });
            this.handleQuery();
          } else {
            this.$message({
              type: 'error',
              message: res.msg
            });
          }
        })
        this.selected = [];
        this.$refs.multipleTable.clearSelection();
      }).catch(() => {
        this.$message({
          type: 'info',
          message: '已取消删除'
        });
      });
    },
    handleDeleteAll() {
      this.$confirm('此操作将永久删除选中数据，是否继续?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      }).then(() => {
        reallyDelOrder({orderIds: null}).then(res => {
          if (res.code === 200) {
            this.$message({
              type: 'success',
              message: res.msg
            });
            this.handleQuery();
          } else {
            this.$message({
              type: 'error',
              message: res.msg
            });
          }
        })
        this.selected = [];
        this.$refs.multipleTable.clearSelection();
      }).catch(() => {
        this.$message({
          type: 'info',
          message: '已取消删除'
        });
      });
    },

    /* 还原订单 */
    handleRestore() {
      if (this.selected.length <= 0) {
        Message.warning("请选择要还原的数据");
        return false
      }
      if (this.selected.length == 1) {
        this.$confirm('此操作将还原选中数据,还原后的数据将可以在订单管理中查看，是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          reductionOrder({orderId: this.selected[0].id}).then(res => {
            if (res.code === 200) {
              this.$message({
                type: 'success',
                message: res.msg
              });
              this.handleQuery();
            } else {
              this.$message({
                type: 'error',
                message: res.msg
              });
            }
          })
          this.$refs.multipleTable.clearSelection();
          this.selected = [];
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消还原'
          });
        });
      }
    },
    /* 翻页后序号连贯 */
    getIndex($index) {
      //  表格序号
      return (this.pageNum - 1) * this.pageSize + $index + 1;
    },
    /* 完工单复选框 */
    handleSelectionChange(val) {
      this.selected = val;
    },
    /* 行点击事件 */
    handleRowClick(row, column, event) {
      this.$refs.multipleTable.toggleRowSelection(row, column)
    },
    /* 分页器 */
    handleChange(size, num) {
      this.pageSize = size;
      this.pageNum = num;
      this.queryParams.pageNum = this.pageNum;
      this.queryParams.pageSize = this.pageSize;
      this.handleQuery();
    },
  }
}
</script>

<style lang="scss" scoped>
.recycleTable {
  height: calc(100% - 100px);
  //overflow: hidden;
}
</style>
